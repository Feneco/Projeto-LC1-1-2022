("sorting_seq" sorting_seq occurences_len_0_implies_no_occurences 0 (occurences_len_0_implies_no_occurences-1 nil 3869868756 ("" (skeep) (("" (expand "occurrences") (("" (replace -1) (("" (propax) nil nil)) nil)) nil)) nil) ((occurrences def-decl "nat" sorting_seq nil)) shostak))("sorting_seq" sorting_seq aaaa 0 (aaaa-1 nil 3869877761 ("" (skeep) (("" (expand "permutations") (("" (lemma "cons_of_perm_is_permutation") (("" (expand "occurrences") (("" (inst?) (("1" (inst?) (("1" (expand "finseq_appl") (("1" (replace -2) (("1" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ((occurrences def-decl "nat" sorting_seq nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (T formal-type-decl nil sorting_seq nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (finite_sequence type-eq-decl nil finite_sequences nil) (int_minus_int_is_int application-judgement "int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (odd_minus_odd_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil) (permutations const-decl "bool" sorting_seq nil)) shostak))("heapsort" heapsort sink_length 0 (sink_length-1 nil 3651423638 ("" (skeep) (("" (lemma "fsq_permutations_length") (("" (lemma "sink_permutes") (("" (inst?) (("" (inst?) (("" (prop) (("" (lemma "permutations_equiv") (("" (prop) (("" (expand "symmetric?") (("" (hide -1 -3) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((leq formal-const-decl "(total_preorder?[T])" heapsort nil) (total_preorder? const-decl "bool" total_preorder sorting) (PRED type-eq-decl nil defined_types nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (T formal-type-decl nil heapsort nil) (fsq_permutations_length formula-decl nil sorting_seq nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (finite_sequence type-eq-decl nil finite_sequences nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (symmetric? const-decl "bool" relations nil) (permutations_equiv formula-decl nil sorting_seq nil) (sink def-decl "finite_sequence[T]" heapsort nil) (sink_permutes formula-decl nil heapsort nil)) shostak))